@model CantinaEscolar.ViewModels.VendaViewModel
@using Microsoft.AspNetCore.Mvc.Rendering
@{
    ViewData["Title"] = "Registrar Venda";
}

<h2>Vendas</h2>

@if (!string.IsNullOrEmpty(Model.MensagemErro))
{
    <div class="alert alert-danger">@Model.MensagemErro</div>
}

<form asp-action="Create" method="post">
    <div class="mb-3">
        <label asp-for="AlunoId" class="form-label"></label>
        <select asp-for="AlunoId" class="form-select" asp-items="ViewBag.Alunos" id="alunoSelect"></select>
        <span asp-validation-for="AlunoId" class="text-danger"></span>
    </div>

    <div class="row mb-2">
        <div class="col">
            <strong>Limite do responsável:</strong> @Model.LimiteResponsavel.ToString("C2")
        </div>
        <div class="col">
            <strong>Já consumido no mês:</strong> @Model.TotalJaConsumidoNoMes.ToString("C2")
        </div>
        <div class="col">
            <strong>Disponível:</strong> <span id="limiteDisp">@Model.LimiteDisponivel.ToString("C2")</span>
        </div>
    </div>

    <table class="table table-striped align-middle">
        <thead>
            <tr>
                <th>Produto</th>
                <th class="text-end">Preço</th>
                <th style="width:140px" class="text-end">Quantidade</th>
                <th class="text-end">Subtotal</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Itens.Count; i++)
            {
                <tr>
                    <td>
                        @Model.Itens[i].ProdutoNome
                        <input type="hidden" asp-for="Itens[@i].ProdutoId" />
                        <input type="hidden" asp-for="Itens[@i].ProdutoNome" />
                        <input type="hidden" asp-for="Itens[@i].Preco" />
                    </td>
                    <td class="text-end">@Model.Itens[i].Preco.ToString("C2")</td>
                    <td class="text-end">
                        <input class="form-control text-end quantidade" asp-for="Itens[@i].Quantidade" type="number" min="0" value="0" />
                    </td>
                    <td class="text-end subtotal">R$ 0,00</td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <th colspan="3" class="text-end">Total da venda:</th>
                <th class="text-end" id="totalVenda">R$ 0,00</th>
            </tr>
        </tfoot>
    </table>

    <button type="submit" class="btn btn-primary">Confirmar venda</button>
    <a asp-controller="Home" asp-action="Index" class="btn btn-secondary">Cancelar</a>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        const fmt = new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' });

        function recalcular() {
            let total = 0;
            document.querySelectorAll('tbody tr').forEach(tr => {
                const preco = parseFloat(tr.querySelector('input[name$=".Preco"]').value.replace(',', '.'));
                const qtdEl = tr.querySelector('.quantidade');
                const qtd = parseInt(qtdEl.value || '0');
                const sub = (qtd * preco) || 0;
                tr.querySelector('.subtotal').textContent = fmt.format(sub);
                total += sub;
            });
            document.getElementById('totalVenda').textContent = fmt.format(total);
        }

        document.querySelectorAll('.quantidade').forEach(el => {
            el.addEventListener('input', recalcular);
        });

        // Atualiza limite disponível ao trocar aluno
        document.getElementById('alunoSelect').addEventListener('change', async (e) => {
            const alunoId = e.target.value;
            if (!alunoId) return;
            const resp = await fetch(`@Url.Action("LimiteDisponivel", "Vendas")?alunoId=${alunoId}`);
            const data = await resp.json();
            document.getElementById('limiteDisp').textContent = fmt.format(data.disponivel);
        });

        // cálculo inicial
        recalcular();
    </script>
}
